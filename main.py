from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import API_TOKEN
import database

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


user_states = {}


button_add = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
button_search_custom = KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
button_all_phones = KeyboardButton('–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã')
button_delete = KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
menu = ReplyKeyboardMarkup(resize_keyboard=True).add(button_add, button_search_custom, button_all_phones, button_delete)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.", reply_markup=menu)

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
async def request_phone_data(message: types.Message):
    user_states[message.from_user.id] = 'adding_phone'
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'13 128GB Blue 56500 üáØüáµ'\n'14 256GB Black 80000 üá∫üá∏'")

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'adding_phone')
async def process_phone(message: types.Message):
    lines = message.text.strip().split('\n')
    added_count = 0
    for line in lines:
        parts = line.split()
        if len(parts) == 5:
            try:
                await database.add_telephone(parts[0], parts[1], parts[2], int(parts[3]), parts[4])
                added_count += 1
            except ValueError:
                await message.reply(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.")
    user_states.pop(message.from_user.id, None)
    await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")


@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
async def request_search_details(message: types.Message):
    user_states[message.from_user.id] = 'searching_phone'
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'13 Black' –∏–ª–∏ '14 Black üá∫üá∏' –∏–ª–∏ '14 256GB Black'")

@dp.message_handler(lambda message: message.text == '–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã')
async def show_all_phones(message: types.Message):
    phones = await database.get_all_telephones()
    if phones:
        reply_message = "\n".join([f"–ú–æ–¥–µ–ª—å: {phone[0]}, –ü–∞–º—è—Ç—å: {phone[1]}, –¶–≤–µ—Ç: {phone[2]}, –¶–µ–Ω–∞: {phone[3]}, –°—Ç—Ä–∞–Ω–∞: {phone[4]}" for phone in phones])
        await message.reply(reply_message)
    else:
        await message.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'searching_phone')
async def search_telephone(message: types.Message):
    parts = message.text.split(maxsplit=3)
    if len(parts) < 2 or len(parts) > 4:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    model, color = parts[:2]
    flag = parts[2] if len(parts) == 3 else None
    storage = None
    if 'GB' in model:
        model, storage = model.split(maxsplit=1)

    phones = await database.get_telephone_by_details(model, storage, color, flag)
    if phones:
        reply_message = "\n".join([f"–ú–æ–¥–µ–ª—å: {phone[0]}, –ü–∞–º—è—Ç—å: {phone[1]}, –¶–≤–µ—Ç: {phone[2]}, –¶–µ–Ω–∞: {phone[3]}, –°—Ç—Ä–∞–Ω–∞: {phone[4]}" for phone in phones])
        await message.reply(reply_message)
    else:
        await message.reply("–¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    user_states.pop(message.from_user.id, None)

@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
async def request_phone_deletion(message: types.Message):
    user_states[message.from_user.id] = 'deleting_phone'
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'13 128GB Green'")

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'deleting_phone')
async def delete_phone(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) >= 2:
        model = parts[0]
        storage = parts[1]
        await database.delete_telephone(model, storage)
        await message.reply(f"–¢–µ–ª–µ—Ñ–æ–Ω {model} {storage} —É–¥–∞–ª–µ–Ω.")
    else:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    user_states.pop(message.from_user.id, None)
async def default_handler(message: types.Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

async def on_startup(_):
    await database.create_table()

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)